<beast version='2.0'
       namespace='beast.app.beauti:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.base.evolution.tree.coalescent:beast.base.util:beast.base.math:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.inference.distribution:beastfx.app.inputeditor:beastfx.app.beauti:beast.base.inference.util'>

    <mergewith point='ACGPriorTemplates'>

        <!-- Coalescent for Constant population -->
        <subtemplate id='CoalescentConstantPopulation' class='bacter.model.ACGCoalescent'
                     mainid='CoalescentConstant.t:$(n)'>
            <![CDATA[
            <plugin spec='bacter.model.ACGCoalescent' id="CoalescentConstant.t:$(n)">
                <tree idref="Tree.t:$(n)"/>
                <rho id="rho.t:$(n)" spec="parameter.RealParameter" value="0.001"/>
                <delta id="delta.t:$(n)" spec="parameter.RealParameter" value="1000"/>
                <populationModel id="popModelConstant.t:$(n)" spec="beast.base.evolution.tree.coalescent.ConstantPopulation">
                    <popSize id="popSize.t:$(n)" spec="parameter.RealParameter" value="1" />
                </populationModel>
            </plugin>

            <prior id='popSizePrior.t:$(n)' x='@popSize.t:$(n)'>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </prior>

            <operator id='popSizeScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@popSize.t:$(n)"/>
            ]]>
            <plate fragment="popModelDependentACGOperators" var="model" range="popModelConstant"/>

            <connect srcID='CoalescentConstant.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentConstant.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='popSizePrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentConstant.t:$(n)) and popSize.t:$(n)/estimate=true'>
                Coalescent population size parameter of partition t:$(n)
            </connect>

            <connect srcID='popSize.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(CoalescentConstant.t:$(n)) and popSize.t:$(n)/estimate=true'/>

            <connect srcID='popSizeScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(CoalescentConstant.t:$(n)) and popSize.t:$(n)/estimate=true'>
                Scale population size of Coalescent prior of tree t:$(n)
            </connect>

            <connect srcID='popSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(CoalescentConstant.t:$(n)) and popSize.t:$(n)/estimate=true'/>
        </subtemplate>

        <!-- Coalescent for Exponential population -->
        <subtemplate id='CoalescentExponentialPopulation' class='bacter.model.ACGCoalescent'
                     mainid='CoalescentExponential.t:$(n)'>
            <![CDATA[
            <plugin spec='bacter.model.ACGCoalescent' id="CoalescentExponential.t:$(n)">
                <tree idref="Tree.t:$(n)"/>
                <rho id="rho.t:$(n)" spec="parameter.RealParameter" value="0.001"/>
                <delta id="delta.t:$(n)" spec="parameter.RealParameter" value="1000"/>
                <populationModel id="popModelExponentialGrowth.t:$(n)" spec="beast.base.evolution.tree.coalescent.ExponentialGrowth">
                    <popSize id="popFinalSize.t:$(n)" spec="parameter.RealParameter" value="1" estimate="true"/>
                    <growthRate id="popGrowthRate.t:$(n)" spec="parameter.RealParameter" value="0.1" estimate="true"/>
                </populationModel>
            </plugin>

            <prior id='popFinalSizePrior.t:$(n)' x='@popFinalSize.t:$(n)'>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </prior>

            <prior id='popGrowthRatePrior.t:$(n)' x='@popGrowthRate.t:$(n)'>
                <distr spec="beast.base.inference.distribution.OneOnX"/>
            </prior>

            <operator id='popFinalSizeScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@popFinalSize.t:$(n)"/>

            <operator id='popGrowthRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@popGrowthRate.t:$(n)"/>
            ]]>
            <plate fragment="popModelDependentACGOperators" var="model" range="popModelExponentialGrowth"/>

            <connect srcID='CoalescentExponential.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentExponential.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='popFinalSizePrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentExponential.t:$(n)) and popFinalSize.t:$(n)/estimate=true'>
                Coalescent population size parameter of partition t:$(n)
            </connect>
            <connect srcID='popGrowthRatePrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(CoalescentExponential.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'>
                Coalescent growth rate of partition t:$(n)
            </connect>

            <connect srcID='popFinalSize.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(CoalescentExponential.t:$(n)) and popFinalSize.t:$(n)/estimate=true'/>
            <connect srcID='popGrowthRate.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(CoalescentExponential.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'/>

            <connect srcID='popFinalSizeScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(CoalescentExponential.t:$(n)) and popFinalSize.t:$(n)/estimate=true'>
                Scale population size of Coalescent prior of tree t:$(n)
            </connect>
            <connect srcID='popGrowthRateScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(CoalescentExponential.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'>
                Scale growth rate of Coalescent prior of tree t:$(n)
            </connect>

            <connect srcID='popFinalSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(CoalescentExponential.t:$(n)) and popFinalSize.t:$(n)/estimate=true'/>
            <connect srcID='popGrowthRate.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(CoalescentExponential.t:$(n)) and popGrowthRate.t:$(n)/estimate=true'/>
        </subtemplate>

        <!-- Coalescent  with Piecewise Constant population -->
        <subtemplate id='CoalescentBayesianSkyline' class='bacter.model.ACGCoalescent'
                     mainid='BSP.t:$(n)'>
            <![CDATA[
            <plugin spec='bacter.model.ACGCoalescent' id="BSP.t:$(n)">
                <tree idref="Tree.t:$(n)"/>
                <rho id="rho.t:$(n)" spec="parameter.RealParameter" value="0.001"/>
                <delta id="delta.t:$(n)" spec="parameter.RealParameter" value="1000"/>
                <populationModel spec='bacter.model.pop.SkylinePopulationFunction' id="popModelBSP.t:$(n)"
                                 acg="@Tree.t:$(n)"
                                 nGridPoints="10"
                                 piecewiseLinear="true">
                    <popSizes id="popSizes.t:$(n)" spec='parameter.RealParameter' value="1.0" dimension="5"/>
                    <groupSizes id="groupSizes.t:$(n)" spec='parameter.IntegerParameter' value="0"/>
                </populationModel>
            </plugin>

            <distribution id="popSizesPrior.t:$(n)"
                spec="beast.base.inference.distribution.MarkovChainDistribution"
                jeffreys="true" parameter="@popSizes.t:$(n)"/>

            <operator id="popSizesScaler.t:$(n)" spec="ScaleOperator" weight="1.0"
                scaleFactor="0.8" parameter="@popSizes.t:$(n)"/>

            <operator id="groupSizesExchanger.t:$(n)" spec='DeltaExchangeOperator' weight="1"
                delta="1" integer="true"
                intparameter="@groupSizes.t:$(n)"/>
            ]]>

            <plate fragment="popModelDependentACGOperators" var="model" range="popModelBSP"/>

            <connect srcID='BSP.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(BSP.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='popSizesPrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(BSP.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='popSizes.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(BSP.t:$(n)) and popSizes.t:$(n)/estimate=true'/>
            <connect srcID='groupSizes.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(BSP.t:$(n)) and groupSizes.t:$(n)/estimate=true'/>

            <connect srcID='popSizesScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BSP.t:$(n)) and popSizes.t:$(n)/estimate=true'/>
            <connect srcID='groupSizesExchanger.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(BSP.t:$(n)) and groupSizes.t:$(n)/estimate=true'/>

            <connect srcID='popModelBSP.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(BSP.t:$(n)) and popSizes.t:$(n)/estimate=true'/>
        </subtemplate>

    </mergewith>
</beast>


